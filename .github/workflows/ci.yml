# name: CI Pipeline

# on:
#   push:
#     branches:
#       - main
#   pull_request:
#     branches:
#       - main

# jobs:
#   build:
#     runs-on: macos-latest

#     steps:
#       # Step 1: Checkout the code
#       - name: Checkout code
#         uses: actions/checkout@v3

#       # Step 2: Set up Node.js environment
#       - name: Set up Node.js
#         uses: actions/setup-node@v3
#         with:
#           node-version: 20

#       # Step 3: Navigate to app directory and install dependencies
#       - name: Install dependencies
#         working-directory: ./app
#         run: npm install

#       # Step 4: Run Linters
#       - name: Run ESLint
#         working-directory: ./app
#         run: npm run lint
#         env:
#           CI: true

#       # Step 5: Check for Formatting
#       - name: Run Prettier
#         working-directory: ./app
#         run: npx prettier --check "./**/*.{js,jsx,ts,tsx,json,css,scss,md}"

#       # Optional: Add Logs
#       - name: Logs
#         run: echo "All checks passed successfully!"

#       # Step 6: Report Success
#       - name: Completion
#         run: echo "CI Pipeline Completed Successfully"

name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: macos-latest

    steps:
      # Step 1: Checkout the code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Set up Node.js environment
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20

      # Step 3: Navigate to app directory and install dependencies
      - name: Install dependencies
        working-directory: ./app
        run: npm install

      # Step 4: Run Linters
      - name: Run ESLint
        working-directory: ./app
        run: npm run lint
        env:
          CI: true

      # Step 5: Check for Formatting
      - name: Run Prettier
        working-directory: ./app
        run: npx prettier --check "./**/*.{js,jsx,ts,tsx,json,css,scss,md}"

      # Step 6: Build Docker Image for the backend
      - name: Build Docker Image
        working-directory: ./backend
        run: docker build -t local-backend:${{ github.sha }} .

      # Step 7: Run Docker Container for Testing
      - name: Run Docker Container
        working-directory: ./backend
        run: |
          docker run --name backend-container -d -p 8080:8080 local-backend:${{ github.sha }}
          sleep 5 # Wait for the container to start

      # Step 8: Run Tests Against the Container
      - name: Run Tests
        working-directory: ./backend
        run: |
          curl -f http://localhost:8080/health || exit 1
          echo "Tests passed successfully"

      # Step 9: Cleanup
      - name: Cleanup Docker
        run: |
          docker stop backend-container
          docker rm backend-container
          docker rmi local-backend:${{ github.sha }}

      # Step 10: Report Success
      - name: Completion
        run: echo "CI/CD Pipeline Completed Successfully"

